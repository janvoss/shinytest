[{"name":"app.R","content":"#| file: app.R\r\n#| title: Interaktives Haushaltsoptimum\r\n\r\n# Benötigte Pakete laden\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\n\r\n# Definition der Benutzeroberfläche (UI)\r\nui <- fluidPage(\r\n  # CSS für ein besseres Design hinzufügen\r\n  tags$head(\r\n    tags$style(HTML(\"\r\n      .shiny-input-container { margin-bottom: 20px; }\r\n      .well { background-color: #f8f9fa; border-color: #dee2e6;}\r\n      h2, h4 { color: #343a40; }\r\n    \"))\r\n  ),\r\n  \r\n  # Titel der Anwendung\r\n  titlePanel(h2(\"Interaktives Haushaltsoptimum (Cobb-Douglas)\", align = \"center\")),\r\n  \r\n  # Seitenleisten-Layout\r\n  sidebarLayout(\r\n    # Panel für die Seitenleiste mit den Eingabeelementen\r\n    sidebarPanel(\r\n      width = 3,\r\n      h4(\"Parameter anpassen\"),\r\n      # Schieberegler für das Einkommen (I)\r\n      sliderInput(\"I\", \"Einkommen (I)\", min = 50, max = 500, value = 100, step = 10, pre = \"€\"),\r\n      # Schieberegler für den Preis von Gut 1 (p1)\r\n      sliderInput(\"p1\", \"Preis von Gut 1 (p₁)\", min = 0.1, max = 5, value = 1, step = 0.1, pre = \"€\"),\r\n      # Schieberegler für den Preis von Gut 2 (p2)\r\n      sliderInput(\"p2\", \"Preis von Gut 2 (p₂)\", min = 0.1, max = 5, value = 0.5, step = 0.1, pre = \"€\"),\r\n      # Schieberegler für den Präferenzparameter (alpha)\r\n      sliderInput(\"alpha\", \"Präferenz (α)\", min = 0.05, max = 0.95, value = 0.3, step = 0.05)\r\n    ),\r\n    \r\n    # Hauptpanel zur Anzeige der Grafik\r\n    mainPanel(\r\n      width = 9,\r\n      plotOutput(\"cobbDouglasPlot\", height = \"600px\")\r\n    )\r\n  )\r\n)\r\n\r\n# Definition der Server-Logik\r\nserver <- function(input, output) {\r\n  \r\n  # Reaktiv die Berechnungen durchführen, wenn sich ein Input ändert\r\n  reactive_calcs <- reactive({\r\n    # Eingabewerte von den Schiebereglern holen\r\n    I <- input$I\r\n    p1 <- input$p1\r\n    p2 <- input$p2\r\n    alpha <- input$alpha\r\n    \r\n    # Berechnung des optimalen Konsumpunkts (Gleichgewicht)\r\n    x1_eq <- alpha * I / p1\r\n    x2_eq <- (1 - alpha) * I / p2\r\n    \r\n    # Berechnung des Nutzenniveaus im Gleichgewicht\r\n    # Fehlerbehandlung für den Fall, dass x1_eq oder x2_eq null sind\r\n    U_eq <- if (x1_eq > 0 && x2_eq > 0) {\r\n      x1_eq^alpha * x2_eq^(1 - alpha)\r\n    } else {\r\n      0\r\n    }\r\n    \r\n    list(I = I, p1 = p1, p2 = p2, alpha = alpha, x1_eq = x1_eq, x2_eq = x2_eq, U_eq = U_eq)\r\n  })\r\n  \r\n  # Die Grafik rendern\r\n  output$cobbDouglasPlot <- renderPlot({\r\n    \r\n    # Hole die berechneten Werte\r\n    calcs <- reactive_calcs()\r\n    I <- calcs$I\r\n    p1 <- calcs$p1\r\n    p2 <- calcs$p2\r\n    x1_eq <- calcs$x1_eq\r\n    x2_eq <- calcs$x2_eq\r\n    U_eq <- calcs$U_eq\r\n    \r\n    # Maximaler Konsum von Gut 1 (Schnittpunkt mit der x-Achse)\r\n    x1_max <- I / p1\r\n    \r\n    # Erstellen der Daten für die Kurven\r\n    # Wir starten bei einem kleinen Wert, um Division durch Null zu vermeiden\r\n    x1_vals <- seq(0.01, x1_max * 1.1, length.out = 200)\r\n    \r\n    # Daten für die Budgetgerade\r\n    df_budget <- data.frame(\r\n      x1 = seq(0, x1_max, length.out = 200),\r\n      Kurve = \"Budgetgerade\"\r\n    )\r\n    df_budget$x2 <- I / p2 - (p1 / p2) * df_budget$x1\r\n    \r\n    # Daten für die Indifferenzkurve\r\n    df_indifferenz <- data.frame(\r\n      x1 = x1_vals,\r\n      Kurve = \"Indifferenzkurve\"\r\n    )\r\n    # Nur berechnen, wenn U_eq > 0 ist\r\n    if (U_eq > 0) {\r\n      df_indifferenz$x2 <- (U_eq / (df_indifferenz$x1^calcs$alpha))^(1 / (1 - calcs$alpha))\r\n    } else {\r\n      df_indifferenz$x2 <- NA\r\n    }\r\n    \r\n    # Kombinieren der Daten\r\n    df <- rbind(df_budget, df_indifferenz)\r\n    # Entferne unmögliche (negative) Werte und Ausreißer\r\n    df <- df[df$x2 >= 0 & df$x2 < (I/p2)*1.5, ]\r\n    \r\n    # Erstellen der Grafik mit ggplot2\r\n    ggplot(df, aes(x = x1, y = x2, color = Kurve)) +\r\n      geom_line(na.rm = TRUE, linewidth = 1.2) +\r\n      \r\n      # Gleichgewichtspunkt und gestrichelte Linien hinzufügen\r\n      annotate(\"point\", x = x1_eq, y = x2_eq, color = \"#212529\", size = 4, shape = 8, stroke = 1.5) +\r\n      annotate(\"segment\", x = x1_eq, xend = x1_eq, y = 0, yend = x2_eq, linetype = \"dashed\", color = \"black\") +\r\n      annotate(\"segment\", x = 0, xend = x1_eq, y = x2_eq, yend = x2_eq, linetype = \"dashed\", color = \"black\") +\r\n      \r\n      # Skalen und Achsen anpassen\r\n      scale_x_continuous(\r\n        limits = c(0, I / p1 * 1.1), \r\n        expand = c(0, 0),\r\n        breaks = unique(round(c(0, x1_eq, I / p1), 1))\r\n      ) +\r\n      scale_y_continuous(\r\n        limits = c(0, I / p2 * 1.1), \r\n        expand = c(0, 0),\r\n        breaks = unique(round(c(0, x2_eq, I / p2), 1))\r\n      ) +\r\n      scale_color_manual(values = c(\"Budgetgerade\" = \"#007bff\", \"Indifferenzkurve\" = \"#dc3545\")) +\r\n      \r\n      # Titel, Untertitel und Achsenbeschriftungen\r\n      labs(\r\n        title = \"Haushaltsoptimum: Budgetgerade und Indifferenzkurve\",\r\n        subtitle = paste0(\"Optimum bei x₁ = \", round(x1_eq, 2), \" und x₂ = \", round(x2_eq, 2)),\r\n        x = expression(Menge~Gut~x[1]),\r\n        y = expression(Menge~Gut~x[2]),\r\n        color = \"\"\r\n      ) +\r\n      \r\n      # Theme und Design anpassen\r\n      theme_light(base_size = 14) +\r\n      theme(\r\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\r\n        plot.subtitle = element_text(hjust = 0.5, color = \"gray40\"),\r\n        legend.position = \"bottom\",\r\n        legend.text = element_text(size = 12),\r\n        axis.title = element_text(size = 14),\r\n        panel.grid.major = element_line(color = \"gray90\"),\r\n        panel.grid.minor = element_blank(),\r\n        panel.border = element_rect(color = \"gray80\")\r\n      )\r\n  }, res = 100) # Auflösung für eine schärfere Grafik erhöhen\r\n}\r\n\r\n# Die Shiny App erstellen und starten\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
